<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.qiang.practice.mapper.SysUserMsgListMapper">
  <resultMap id="BaseResultMap" type="com.qiang.practice.model.SysUserMsgList">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="sys_user" jdbcType="BIGINT" property="sysUser" />
    <result column="another_user_id" jdbcType="BIGINT" property="anotherUserId" />
  </resultMap>

  <resultMap id="BaseResultAndUserMap" type="com.qiang.practice.model.vo.SysUserMsgListUserNameMsgVO">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="sys_user" jdbcType="BIGINT" property="sysUser" />
    <result column="another_user_id" jdbcType="BIGINT" property="anotherUserId" />
    <result column="user_name" jdbcType="VARCHAR" property="userName" />
    <result column="img_path" jdbcType="VARCHAR" property="imgPath" />
    <result column="un_read_num" jdbcType="INTEGER" property="unReadNum" />
    <result column="last_msg" jdbcType="LONGVARCHAR" property="lastMsg" />
    <result column="last_msg_date" jdbcType="TIMESTAMP" property="lastMsgDate" />
    <result column="status" jdbcType="TINYINT" property="status" />
  </resultMap>
  <sql id="Base_Column_List">
    id, sys_user, another_user_id
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from sys_user_msg_list
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from sys_user_msg_list
    where id = #{id,jdbcType=BIGINT}
  </delete>
    <insert id="insert" parameterType="com.qiang.practice.model.SysUserMsgList">
    insert into sys_user_msg_list (id, sys_user, another_user_id,
      last_msg_date)
    values (#{id,jdbcType=BIGINT}, #{sysUser,jdbcType=BIGINT}, #{anotherUserId,jdbcType=BIGINT},
    #{lastMsgDate,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.qiang.practice.model.SysUserMsgList">
    insert into sys_user_msg_list
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="sysUser != null">
        sys_user,
      </if>
      <if test="anotherUserId != null">
        another_user_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="sysUser != null">
        #{sysUser,jdbcType=BIGINT},
      </if>
      <if test="anotherUserId != null">
        #{anotherUserId,jdbcType=BIGINT},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.qiang.practice.model.SysUserMsgList">
    update sys_user_msg_list
    <set>
      <if test="sysUser != null">
        sys_user = #{sysUser,jdbcType=BIGINT},
      </if>
      <if test="anotherUserId != null">
        another_user_id = #{anotherUserId,jdbcType=BIGINT},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.qiang.practice.model.SysUserMsgList">
    update sys_user_msg_list
    set sys_user = #{sysUser,jdbcType=BIGINT},
      another_user_id = #{anotherUserId,jdbcType=BIGINT}
    where id = #{id,jdbcType=BIGINT}
  </update>

  <!--获取有过消息交流的好友列表-->
  <select id="frendList" resultMap="BaseResultAndUserMap">
    select
        suml.id,
        suml.sys_user,
        suml.another_user_id,
        u.user_name,
        u.img_path,
        (   select if(is_recall=0,
                        if(msg_type = 'text', msg, if(msg_type = 'image', '[图片]', '[文件]')),
                        if(from_user_id=#{sysUser}, '你撤回了一条消息', '对方撤回了一条消息'))
            from sys_user_msg
            where ((from_user_id=#{sysUserId} and to_user_id=suml.another_user_id)
             or (from_user_id=suml.another_user_id and to_user_id=#{sysUserId}))
             and (del_user_id &lt;&gt; #{sysUserId} or del_user_id is  null)
            order by id desc
            limit 1
        ) as last_msg,
        (	select count(id)
            from sys_user_msg
            where from_user_id=suml.another_user_id
            and to_user_id=#{sysUserId} and is_read=0 and is_recall=0
        ) as un_read_num,
        suml.last_msg_date as last_msg_date,
        sus.status
    from sys_user_msg_list suml
    join sys_user u
    on suml.another_user_id=u.id
    join sys_user_status sus
    on u.id=sus.sys_user
    where suml.sys_user=#{sysUserId}
    order by suml.last_msg_date desc
  </select>

  <!--根据sysUserId和anotherUserId获取记录数-->
  <select id="getByTwoUserId" resultType="java.lang.Long">
    select id
    from sys_user_msg_list
    where sys_user=#{sysUserId}
    and another_user_id=#{anotherUserId}
  </select>

  <!--将两人的聊天列表的最后消息时间置为最新的-->
  <update id="updateLastMsgDateToNewByTwoUserId">
    update sys_user_msg_list
    set last_msg_date = #{lastMsgDate}
    where   (sys_user = #{sysUserId} and another_user_id = #{toUserId})
                or
            (sys_user = #{toUserId} and another_user_id = #{sysUserId})
  </update>

  <!--没有则添加，存在则不添加-->
  <insert id="insertIfAbsent">
    insert into sys_user_msg_list
    (sys_user, another_user_id, last_msg_date )
    select #{sysUser}, #{anotherUserId}, #{lastMsgDate} from DUAL
    where not exists (
        select id from sys_user_msg_list suml
        where suml.sys_user= #{sysUser}
        and suml.another_user_id = #{anotherUserId}
    )
  </insert>

  <!--发完消息后,更新双方的左侧最近聊天列表-->
  <insert id="insertAfterSendMsg">
    insert into sys_user_msg_list
    (sys_user, another_user_id, last_msg_date )
    select #{sysUser}, #{anotherUserId}, #{lastMsgDate} from DUAL
    where not exists (
        select id from sys_user_msg_list suml
        where suml.sys_user= #{sysUser}
        and suml.another_user_id = #{anotherUserId} );

    insert into sys_user_msg_list
    (sys_user, another_user_id, last_msg_date )
    select #{anotherUserId}, #{sysUser}, #{lastMsgDate} from DUAL
    where not exists (
        select id from sys_user_msg_list suml
        where suml.sys_user= #{anotherUserId}
        and suml.another_user_id = #{sysUser} );

    update sys_user_msg_list
    set last_msg_date = #{lastMsgDate}
    where   (sys_user = #{sysUser} and another_user_id = #{anotherUserId})
                or
            (sys_user = #{anotherUserId} and another_user_id = #{sysUser})
  </insert>

</mapper>